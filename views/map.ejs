<style>
  body {
    margin: 0;
    list-style: none;
  }

  #listBtn {
    position: fixed;
    bottom: 10vh;
    right: 43vw;
    width: 300px;
    border: 3px solid #73AD21;
    z-index: 1;
  }

  input[id="menuIcon"] {
    display: none;
  }

  input[id="menuIcon"]+label {
    display: block;
    width: 30px;
    height: 20px;
    position: fixed;
    right: 10px;
    top: 10px;
    transition: all 0.35s;
    cursor: pointer;
    z-index: 3;
  }

  input[id="menuIcon"]+label span {
    display: block;
    position: absolute;
    width: 100%;
    height: 5px;
    border-radius: 30px;
    background: #222;
    transition: all .35s;
  }

  input[id="menuIcon"]+label span:nth-child(1) {
    top: 0;
  }

  input[id="menuIcon"]+label span:nth-child(2) {
    top: 50%;
    transform: translateY(-50%);
  }

  input[id="menuIcon"]+label span:nth-child(3) {
    bottom: 0;
  }

  input[id="menuIcon"]:checked+label span:nth-child(1) {
    top: 50%;
    transform: translateY(-50%) rotate(45deg);
  }

  input[id="menuIcon"]:checked+label span:nth-child(2) {
    opacity: 0;
  }

  input[id="menuIcon"]:checked+label span:nth-child(3) {
    bottom: 50%;
    transform: translateY(50%) rotate(-45deg);
  }

  div[class="sidebar"] {
    width: 300px;
    height: 100%;
    background: #dddddd;
    position: fixed;
    top: 0;
    right: -300px;
    z-index: 2;
    transition: all .35s;
  }

  input[id="menuIcon"]:checked+label+div {
    right: 0;
  }

  .doctorImg {
    width: 100px;
    height: 100px;
  }
</style>

<body onload="load()">
  <input type="checkbox" name="" id="menuIcon">
  <label for="menuIcon">
    <span></span>
    <span></span>
    <span></span>
  </label>
  <div class="sidebar">
    <nav id="list">
      <ul>
      </ul>
    </nav>
  </div>
  <div id="map" style="width: 100%; height: 100vh;"></div>
  <div>
    <button id="listBtn" type="menu"></button>
  </div>
  <script type="text/javascript"
    src="//dapi.kakao.com/v2/maps/sdk.js?appkey=49ae370ae9f520ffdbf60c3ca2e7b0c1&libraries=services"></script>
  <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=49ae370ae9f520ffdbf60c3ca2e7b0c1"></script>
  <script>
    // 동의
    function successCallback(position) {
      // 현재 좌표 중심좌표
      // position.coords.latitude,position.coords.longitude	 37.486868162882, 127.08303697984
      var mapContainer = document.getElementById("map") // 지도를 표시할 div

      mapOption = {
        center: new kakao.maps.LatLng(position.coords.latitude, position.coords.longitude), // 지도의 중심좌표
        level: 5, // 지도의 확대 레벨
      };

      var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

      var geocoder = new kakao.maps.services.Geocoder();

      const data = getData(map)

      document.getElementById('listBtn').addEventListener('click', (event) => {
        event.preventDefault();

        const data = getData(map)

        document.getElementById("menuIcon").checked = true;

        fetch(`http://localhost:3000/api/hospitals/around/info`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        })
          .then((response) => response.json())
          .then((data) => {
            document.getElementById('list').innerHTML = ``
            for (let i = 0; i < data.hospitals.length; i++) {
              const a =
                `
              <div>${data.hospitals[i].name}</div>
              <div>${data.hospitals[i].address}</div>
              `

              const li = document.createElement('li');
              li.innerHTML = a;
              document.getElementById('list').appendChild(li);
            }
          })
      })

      fetch(`http://localhost:3000/api/hospitals/around`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })
        .then((response) => response.json())
        .then((data) => {
          const a = document.getElementById("listBtn")
          a.innerText = `근처 ${data.hospitals.length}개의 병원`
          if (!data.hospitals[0]) {
            kakao.maps.event.addListener(map, "zoom_changed", function () {

              const data = getData(map)

              fetch(`http://localhost:3000/api/hospitals/around/info`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              })
                .then((response) => response.json())
                .then((data) => {
                  document.getElementById('list').innerHTML = ``
                  for (let i = 0; i < data.hospitals.length; i++) {
                    const a =
                      `
              <div>${data.hospitals[i].name}</div>
              <div>${data.hospitals[i].address}</div>
              `

                    const li = document.createElement('li');
                    li.innerHTML = a;
                    document.getElementById('list').appendChild(li);
                  }
                })

              fetch(`http://localhost:3000/api/hospitals/around`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              })
                .then((response) => response.json())
                .then((data) => {
                  const a = document.getElementById("listBtn")
                  a.innerText = `근처 ${data.hospitals.length}개의 병원`
                })
            });

            kakao.maps.event.addListener(map, 'dragend', function () {

              const data = getData(map)

              fetch(`http://localhost:3000/api/hospitals/around/info`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              })
                .then((response) => response.json())
                .then((data) => {
                  document.getElementById('list').innerHTML = ``
                  for (let i = 0; i < data.hospitals.length; i++) {
                    const a =
                      `
              <div>${data.hospitals[i].name}</div>
              <div>${data.hospitals[i].address}</div>
              `

                    const li = document.createElement('li');
                    li.innerHTML = a;
                    document.getElementById('list').appendChild(li);
                  }
                })

              fetch(`http://localhost:3000/api/hospitals/around`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              })
                .then((response) => response.json())
                .then((data) => {
                  const a = document.getElementById("listBtn")
                  a.innerText = `근처 ${data.hospitals.length}개의 병원`
                  for (let i = 0; i < data.hospitals.length; i++) {
                    geocoder.addressSearch(
                      data.hospitals[i].address,
                      function (result, status) {
                        // 정상적으로 검색이 완료됐으면
                        if (status === kakao.maps.services.Status.OK) {
                          var coords = new kakao.maps.LatLng(result[0].y, result[0].x);

                          // 결과값으로 받은 위치를 마커로 표시합니다
                          var marker = new kakao.maps.Marker({
                            map: map,
                            position: coords,
                          });

                          marker.id = data.hospitals[i].hospitalId
                          // 마커에 클릭이벤트를 등록합니다
                          kakao.maps.event.addListener(marker, 'click', function () {
                            // 마커 위에 인포윈도우를 표시합니다
                            const id = marker.id

                            document.getElementById("menuIcon").checked = true;

                            fetch(`http://localhost:3000/api/hospitals/info/${id}`)
                              .then((response) => response.json())
                              .then((data) => {
                                document.getElementById('list').innerHTML = ``

                                const a =
                                  `
                                      <div>${data.hospitalName}</div>
                                      <div>${data.hospitalphone}</div>
                                      <div>${data.hospitalAddress}</div>
                                        `
                                const li = document.createElement('li');
                                li.innerHTML = a;
                                document.getElementById('list').appendChild(li);

                                for (let i = 0; i < data.doctors.length; i++) {
                                  const b = `<div>${data.doctors[i].doctor}</div>
                                        <img src="${data.doctors[i].doctorImage}" alt="${data.doctors[i].doctor}" class="doctorImg">
                                        <div>${data.doctors[i].department}</div>`
                                  const doctorLi = document.createElement('li');
                                  doctorLi.innerHTML = b;
                                  document.getElementById('list').appendChild(doctorLi);
                                }
                              })
                          });
                        }
                      }
                    );
                  }
                })
            })
          } else {
            for (let i = 0; i < data.hospitals.length; i++) {
              geocoder.addressSearch(
                data.hospitals[i].address,
                function (result, status) {
                  // 정상적으로 검색이 완료됐으면
                  if (status === kakao.maps.services.Status.OK) {
                    var coords = new kakao.maps.LatLng(result[0].y, result[0].x);

                    // 결과값으로 받은 위치를 마커로 표시합니다
                    var marker = new kakao.maps.Marker({
                      map: map,
                      position: coords,
                    });
                  }

                  kakao.maps.event.addListener(map, "zoom_changed", function () {

                    marker.setMap(null);

                    const data = getData(map)

                    fetch(`http://localhost:3000/api/hospitals/around/info`, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data),
                    })
                      .then((response) => response.json())
                      .then((data) => {
                        document.getElementById('list').innerHTML = ``
                        for (let i = 0; i < data.hospitals.length; i++) {
                          const a =
                            `
              <div>${data.hospitals[i].name}</div>
              <div>${data.hospitals[i].address}</div>
              `

                          const li = document.createElement('li');
                          li.innerHTML = a;
                          document.getElementById('list').appendChild(li);
                        }
                      })
                    fetch(`http://localhost:3000/api/hospitals/around`, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data),
                    })
                      .then((response) => response.json())
                      .then((data) => {
                        const a = document.getElementById("listBtn")
                        a.innerText = `근처 ${data.hospitals.length}개의 병원`
                        for (let i = 0; i < data.hospitals.length; i++) {
                          geocoder.addressSearch(
                            data.hospitals[i].address,
                            function (result, status) {
                              // 정상적으로 검색이 완료됐으면
                              if (status === kakao.maps.services.Status.OK) {
                                var coords = new kakao.maps.LatLng(result[0].y, result[0].x);

                                // 결과값으로 받은 위치를 마커로 표시합니다
                                var marker = new kakao.maps.Marker({
                                  map: map,
                                  position: coords,
                                });

                                marker.id = data.hospitals[i].hospitalId
                                // 마커에 클릭이벤트를 등록합니다
                                kakao.maps.event.addListener(marker, 'click', function () {
                                  console.log(data.doctors[0].doctor)
                                  // 마커 위에 인포윈도우를 표시합
                                  document.getElementById("checkbox").checked = true; 니다
                                  const id = marker.id
                                  fetch(`http://localhost:3000/api/hospitals/info/${id}`)
                                    .then((response) => response.json())
                                    .then((data) => {
                                      console.log(data)
                                      document.getElementById('list').innerHTML = ``

                                      const a =
                                        `
                                      <div>${data.hospitalName}</div>
                                      <div>${data.hospitalphone}</div>
                                      <div>${data.hospitalAddress}</div>
                                        `
                                      const li = document.createElement('li');
                                      li.innerHTML = a;
                                      document.getElementById('list').appendChild(li);


                                      for (let i = 0; i < data.doctors.length; i++) {
                                        const b = `<div>${data.doctors[i].doctor}</div>
                                        <img src="${data.doctors[i].doctorImage}" alt="${data.doctors[i].doctor}" class="doctorImg">
                                        <div>${data.doctors[i].department}</div>`
                                        const doctorLi = document.createElement('li');
                                        doctorLi.innerHTML = b;
                                        document.getElementById('list').appendChild(doctorLi);
                                      }
                                    })
                                });
                              }
                            }
                          );
                        }
                      })
                  });

                  kakao.maps.event.addListener(map, 'dragend', function () {

                    marker.setMap(null);

                    const data = getData(map)

                    fetch(`http://localhost:3000/api/hospitals/around/info`, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data),
                    })
                      .then((response) => response.json())
                      .then((data) => {
                        document.getElementById('list').innerHTML = ``
                        for (let i = 0; i < data.hospitals.length; i++) {
                          const a =
                            `
              <div>${data.hospitals[i].name}</div>
              <div>${data.hospitals[i].address}</div>
              `

                          const li = document.createElement('li');
                          li.innerHTML = a;
                          document.getElementById('list').appendChild(li);
                        }
                      })

                    fetch(`http://localhost:3000/api/hospitals/around`, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify(data),
                    })
                      .then((response) => response.json())
                      .then((data) => {
                        const a = document.getElementById("listBtn")
                        a.innerText = `근처 ${data.hospitals.length}개의 병원`
                        for (let i = 0; i < data.hospitals.length; i++) {
                          geocoder.addressSearch(
                            data.hospitals[i].address,
                            function (result, status) {
                              // 정상적으로 검색이 완료됐으면
                              if (status === kakao.maps.services.Status.OK) {
                                var coords = new kakao.maps.LatLng(result[0].y, result[0].x);

                                // 결과값으로 받은 위치를 마커로 표시합니다
                                var marker = new kakao.maps.Marker({
                                  map: map,
                                  position: coords,
                                });

                                marker.id = data.hospitals[i].hospitalId
                                // 마커에 클릭이벤트를 등록합니다
                                kakao.maps.event.addListener(marker, 'click', function () {
                                  // 마커 위에 인포윈도우를 표시합니다
                                  const id = marker.id
                                  document.getElementById("checkbox").checked = true;
                                  fetch(`http://localhost:3000/api/hospitals/info/${id}`)
                                    .then((response) => response.json())
                                    .then((data) => {
                                      document.getElementById('list').innerHTML = ``

                                      const a =
                                        `
                                      <div>${data.hospitalName}</div>
                                      <div>${data.hospitalphone}</div>
                                      <div>${data.hospitalAddress}</div>
                                        `
                                      const li = document.createElement('li');
                                      li.innerHTML = a;
                                      document.getElementById('list').appendChild(li);

                                      for (let i = 0; i < data.doctors.length; i++) {
                                        const b = `<div>${data.doctors[i].doctor}</div>
                                  <img src="${data.doctors[i].doctorImage}" alt="${data.doctors[i].doctor}" class="doctorImg">
                                        <div>${data.doctors[i].department}</div>`
                                        const doctorLi = document.createElement('li');
                                        doctorLi.innerHTML = b;
                                        document.getElementById('list').appendChild(doctorLi);
                                      }

                                    })
                                });
                              }
                            }
                          );
                        }
                      })
                  }

                  );
                }
              );
            }
          }


        })





      // 아래 코드는 지도 위의 마커를 제거하는 코드입니다
      // marker.setMap(null);

    }


    // 동의 X
    function errorCallback(error) {


      // 현재 좌표 중심좌표
      // position.coords.latitude,position.coords.longitude	 37.486868162882, 127.08303697984
      var mapContainer = document.getElementById("map") // 지도를 표시할 div

      mapOption = {
        center: new kakao.maps.LatLng(37.486868162882, 127.08303697984), // 지도의 중심좌표
        level: 5, // 지도의 확대 레벨
      };

      var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

      var geocoder = new kakao.maps.services.Geocoder();

      // 영역의 좌표를 얻어옵니다.
      const data = getData(map)

      fetch(`http://localhost:3000/api/hospitals/around`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })
        .then((response) => response.json())
        .then((data) => {
          const a = document.getElementById("listBtn")
          a.innerText = `근처 ${data.hospitals.length}개의 병원`
          for (let i = 0; i < data.hospitals.length; i++) {
            geocoder.addressSearch(
              data.hospitals[i].address,
              function (result, status) {
                // 정상적으로 검색이 완료됐으면
                if (status === kakao.maps.services.Status.OK) {
                  var coords = new kakao.maps.LatLng(result[0].y, result[0].x);

                  // 결과값으로 받은 위치를 마커로 표시합니다
                  var marker = new kakao.maps.Marker({
                    map: map,
                    position: coords,
                  });
                }

                kakao.maps.event.addListener(map, "zoom_changed", function () {

                  marker.setMap(null);

                  const data = getData(map)
                  fetch(`http://localhost:3000/api/hospitals/around`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                  })
                    .then((response) => response.json())
                    .then((data) => {
                      const a = document.getElementById("listBtn")
                      a.innerText = `근처 ${data.hospitals.length}개의 병원`
                      for (let i = 0; i < data.hospitals.length; i++) {
                        geocoder.addressSearch(
                          data.hospitals[i].address,
                          function (result, status) {
                            // 정상적으로 검색이 완료됐으면
                            if (status === kakao.maps.services.Status.OK) {
                              var coords = new kakao.maps.LatLng(result[0].y, result[0].x);

                              // 결과값으로 받은 위치를 마커로 표시합니다
                              var marker = new kakao.maps.Marker({
                                map: map,
                                position: coords,
                              });

                              marker.id = data.hospitals[i].hospitalId
                              // 마커에 클릭이벤트를 등록합니다
                              kakao.maps.event.addListener(marker, 'click', function () {
                                console.log(data.doctors[0].doctor)
                                // 마커 위에 인포윈도우를 표시합
                                document.getElementById("checkbox").checked = true; 니다
                                const id = marker.id
                                fetch(`http://localhost:3000/api/hospitals/info/${id}`)
                                  .then((response) => response.json())
                                  .then((data) => {
                                    console.log(data)
                                    document.getElementById('list').innerHTML = ``

                                    const a =
                                      `
                                      <div>${data.hospitalName}</div>
                                      <div>${data.hospitalphone}</div>
                                      <div>${data.hospitalAddress}</div>
                                        `
                                    const li = document.createElement('li');
                                    li.innerHTML = a;
                                    document.getElementById('list').appendChild(li);


                                    for (let i = 0; i < data.doctors.length; i++) {
                                      const b = `<div>${data.doctors[i].doctor}</div>
                                        <img src="${data.doctors[i].doctorImage}" alt="${data.doctors[i].doctor}" class="doctorImg">
                                        <div>${data.doctors[i].department}</div>`
                                      const doctorLi = document.createElement('li');
                                      doctorLi.innerHTML = b;
                                      document.getElementById('list').appendChild(doctorLi);
                                    }
                                  })
                              });
                            }
                          }
                        );
                      }
                    })
                });

                kakao.maps.event.addListener(map, 'dragend', function () {

                  marker.setMap(null);

                  const data = getData(map)

                  fetch(`http://localhost:3000/api/hospitals/around`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                  })
                    .then((response) => response.json())
                    .then((data) => {
                      const a = document.getElementById("listBtn")
                      a.innerText = `근처 ${data.hospitals.length}개의 병원`
                      for (let i = 0; i < data.hospitals.length; i++) {
                        geocoder.addressSearch(
                          data.hospitals[i].address,
                          function (result, status) {
                            // 정상적으로 검색이 완료됐으면
                            if (status === kakao.maps.services.Status.OK) {
                              var coords = new kakao.maps.LatLng(result[0].y, result[0].x);

                              // 결과값으로 받은 위치를 마커로 표시합니다
                              var marker = new kakao.maps.Marker({
                                map: map,
                                position: coords,
                              });

                              marker.id = data.hospitals[i].hospitalId
                              // 마커에 클릭이벤트를 등록합니다
                              kakao.maps.event.addListener(marker, 'click', function () {
                                // 마커 위에 인포윈도우를 표시합니다
                                const id = marker.id
                                document.getElementById("checkbox").checked = true;
                                fetch(`http://localhost:3000/api/hospitals/info/${id}`)
                                  .then((response) => response.json())
                                  .then((data) => {
                                    document.getElementById('list').innerHTML = ``

                                    const a =
                                      `
                                      <div>${data.hospitalName}</div>
                                      <div>${data.hospitalphone}</div>
                                      <div>${data.hospitalAddress}</div>
                                        `
                                    const li = document.createElement('li');
                                    li.innerHTML = a;
                                    document.getElementById('list').appendChild(li);

                                    for (let i = 0; i < data.doctors.length; i++) {
                                      const b = `<div>${data.doctors[i].doctor}</div>
                                  <img src="${data.doctors[i].doctorImage}" alt="${data.doctors[i].doctor}" class="doctorImg">
                                        <div>${data.doctors[i].department}</div>`
                                      const doctorLi = document.createElement('li');
                                      doctorLi.innerHTML = b;
                                      document.getElementById('list').appendChild(doctorLi);
                                    }

                                  })
                              });
                            }
                          }
                        );
                      }
                    })
                }

                );
              }
            );
          }

        })

    }


    function load() {

      if (navigator.geolocation) {

        navigator.geolocation.getCurrentPosition(successCallback, errorCallback);

      } else {

        alert("geolocation not supported");

      }

    }

    function getData(map) {
      var bounds = map.getBounds();

      // 영역의 남서쪽 좌표를 얻어옵니다
      var swLatLng = bounds.getSouthWest();

      // 영역의 북동쪽 좌표를 얻어옵니다
      var neLatLng = bounds.getNorthEast();

      const data = {
        rightLatitude: neLatLng.getLat(),
        rightLongitude: neLatLng.getLng(),
        leftLatitude: swLatLng.getLat(),
        leftLongitude: swLatLng.getLng(),
      };

      return data
    }
  </script>
</body>

</html>